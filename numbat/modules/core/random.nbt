use core::scalar
use core::quantities
use math::functions

# name: Standard uniform distribution sampling
# description: Uniformly samples the interval [0,1).
fn random() -> Scalar

# name: Continuous uniform distribution sampling
# url: https://en.wikipedia.org/wiki/Continuous_uniform_distribution
# description: Uniformly samples the interval [a,b) if a<=b or [b,a) if b<a using inversion sampling.
fn rand_uniform<T>(a: T, b: T) -> T =
    if a <= b
    then random() * (b - a) + a
    else random() * (a - b) + b

# name: Discrete uniform distribution sampling
# url: https://en.wikipedia.org/wiki/Discrete_uniform_distribution
# description: Uniformly samples the integers in the interval [a, b].
fn rand_int<T>(a: T, b: T) -> T =
    if a <= b
    then floor( random() * (floor(b) - ceil(a) + 1 unit_of(a)) ) + ceil(a)
    else floor( random() * (floor(a) - ceil(b) + 1 unit_of(b)) ) + ceil(b)

# name: Normal distribution sampling
# url: https://en.wikipedia.org/wiki/Normal_distribution
# description: Samples a normal distribution with mean μ and standard deviation σ using the Box-Muller transform.
fn rand_norm<T>(μ: T, σ: T) -> T =
    μ + sqrt(-2 σ² × ln(random())) × sin(2π × random())

# name: Geometric distribution sampling
# url: https://en.wikipedia.org/wiki/Geometric_distribution
# description: Samples a gemoetric distribution(the distribution of the number of Bernoulli trials with probability p needed to get one success) by inversion sampling.
#              Parameter p must be a probability (0 <= p <= 1).
fn rand_geom(p: Scalar) -> Scalar =
    if p>=0 && p<=1
    then ceil( ln(1-random()) / ln(1-p) )
    else error("p must be a probability (0 <= p <= 1).")

# name: Exponential distribution sampling
# url: https://en.wikipedia.org/wiki/Exponential_distribution
# description: Sampling an exponential distribution(the distribution of the distance between events in a Poisson process with rate λ) using inversion sampling.
#              The rate parameter λ must be positive.
fn rand_expon<T>(λ: T) -> 1/T =
    if value_of(λ) > 0
    then - ln(1-random()) / λ
    else NaN * unit_of(1/λ)
